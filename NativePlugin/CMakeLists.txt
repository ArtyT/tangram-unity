cmake_minimum_required(VERSION 2.8.12)
project(Earcut)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -O3")
set(NATIVE_PLUGIN Earcut)
set(UNITY_ASSET_PATH ${PROJECT_SOURCE_DIR}/../Assets/Plugins)

file(GLOB SOURCES "code/*.h" "code/*.cpp")

if(IOS)
  message(STATUS "iOS native plugin files will be copied to ${UNITY_ASSET_PATH}/iOS")
  file(COPY ${SOURCES} DESTINATION ${UNITY_ASSET_PATH}/iOS/)
elseif(ANDROID)
  set(NATIVE_PLUGIN ${NATIVE_PLUGIN}-android)
  add_library(${NATIVE_PLUGIN} SHARED ${SOURCES})
elseif(APPLE)
  add_library(${NATIVE_PLUGIN} MODULE ${SOURCES})
  set_target_properties(${NATIVE_PLUGIN} PROPERTIES
    BUNDLE TRUE
    MACOSX_BUNDLE_INFO_PLIST ${PROJECT_SOURCE_DIR}/Info.plist)
  install(TARGETS ${NATIVE_PLUGIN} DESTINATION ${UNITY_ASSET_PATH})
elseif(WIN32 OR UNIX AND NOT APPLE)
  if(UNIX)
    set(NATIVE_PLUGIN ${NATIVE_PLUGIN}-unix)
  endif()
  set(SUPPORTED_ARCHS x86 x86_64)
  if(NOT ARCH)
    set(ARCH x86)
    message(STATUS "Configuration for x86 architecture")
  else()
    list(FIND SUPPORTED_ARCHS ${ARCH} ARCH_IN_LIST)
    if(ARCH_IN_LIST EQUAL -1)
      message(SEND_ERROR "Please select a valid architecture (x86 or x86_64) using -DARCH=")
      return()
    endif()
  endif()
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${ARCH}")
  add_library(${NATIVE_PLUGIN} MODULE ${SOURCES})
  if(UNIX)
    if(ARCH STREQUAL "x86")
      set_target_properties(${NATIVE_PLUGIN} PROPERTIES COMPILE_FLAGS "-m32" LINK_FLAGS "-m32")
    elseif(ARCH STREQUAL "x86_64")
      set_target_properties(${NATIVE_PLUGIN} PROPERTIES COMPILE_FLAGS "-m64" LINK_FLAGS "-m64")
    endif()
  endif()
  install(TARGETS ${NATIVE_PLUGIN} DESTINATION ${UNITY_ASSET_PATH}/${ARCH}/)
else()
  message(SEND_ERROR "Unsupported platform")
  return()
endif()
